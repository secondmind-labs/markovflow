:py:mod:`markovflow.models.gaussian_process_regression`
=======================================================

.. py:module:: markovflow.models.gaussian_process_regression

.. autoapi-nested-parse::

   Module containing a model for GP regression.



Module Contents
---------------

.. py:class:: GaussianProcessRegression(input_data: Tuple[tensorflow.Tensor, tensorflow.Tensor], kernel: markovflow.kernels.SDEKernel, mean_function: Optional[markovflow.mean_function.MeanFunction] = None, chol_obs_covariance: Optional[gpflow.base.TensorType] = None)

   Bases: :py:obj:`markovflow.models.models.MarkovFlowModel`

   Performs GP regression.

   The key reference is Chapter 2 of::

       Gaussian Processes for Machine Learning
       Carl Edward Rasmussen and Christopher K. I. Williams
       The MIT Press, 2006. ISBN 0-262-18253-X.

   This class uses the kernel and the time points to create a state space model.
   GP regression is then a Kalman filter on that state space model using the observations.

   :param kernel: A kernel defining a prior over functions.
   :param input_data: A tuple of ``(time_points, observations)`` containing the observed data:
       time points of observations, with shape ``batch_shape + [num_data]``,
       observations with shape ``batch_shape + [num_data, observation_dim]``.
   :param chol_obs_covariance: A :data:`~markovflow.base.TensorType` containing
       the Cholesky factor of the observation noise covariance,
       with shape ``[observation_dim, observation_dim]``.
       a default None value will assume independent likelihood variance of 1.0
   :param mean_function: The mean function for the GP. Defaults to no mean function.

   .. py:method:: time_points() -> tensorflow.Tensor
      :property:

      Return the time points of observations.

      :return: A tensor with shape ``batch_shape + [num_data]``.


   .. py:method:: observations() -> tensorflow.Tensor
      :property:

      Return the observations.

      :return: A tensor with shape ``batch_shape + [num_data, observation_dim]``.


   .. py:method:: kernel() -> markovflow.kernels.SDEKernel
      :property:

      Return the kernel of the GP.


   .. py:method:: mean_function() -> markovflow.mean_function.MeanFunction
      :property:

      Return the mean function of the GP.


   .. py:method:: loss() -> tensorflow.Tensor

      Return the loss, which is the negative log likelihood.


   .. py:method:: posterior() -> markovflow.posterior.PosteriorProcess
      :property:

      Obtain a posterior process for inference.

      For this class, this is the :class:`~markovflow.posterior.AnalyticPosteriorProcess`
      built from the Kalman filter.


   .. py:method:: log_likelihood() -> tensorflow.Tensor

      Calculate the log likelihood of the observations given the kernel parameters.

      In other words, :math:`log p(y_{1...T} | ϑ)` for some parameters :math:`ϑ`.

      :return: A scalar tensor (summed over the batch shape and the whole trajectory).



