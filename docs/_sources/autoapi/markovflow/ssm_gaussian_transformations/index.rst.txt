:py:mod:`markovflow.ssm_gaussian_transformations`
=================================================

.. py:module:: markovflow.ssm_gaussian_transformations

.. autoapi-nested-parse::

   Module transforming identities to and from expectation and natural parameters.



Module Contents
---------------

.. py:function:: ssm_to_expectations(ssm: markovflow.state_space_model.StateSpaceModel) -> Tuple[gpflow.base.TensorType, gpflow.base.TensorType, gpflow.base.TensorType]

   Transform a :class:`~markovflow.state_space_model.StateSpaceModel` to the expectation
   parameters of the equivalent Gaussian distribution.

   The expectation parameters are defined as the expected value of the sufficient statistics
   :math:`ùîº[œÜ(x)]`, where :math:`œÜ(x)` are the sufficient statistics. For the case of a Gaussian
   distribution that is described via a state space model they are given by:

   .. math:: œÜ(x) = [x, \verb|block_tri_diag|(xx·µÄ)]

   The expectation parameters :math:`Œ∑` and :math:`Œó` are therefore given by::

           [Œº‚ÇÄ  ]
           [Œº‚ÇÅ  ]
       Œ∑ = [‚ãÆ   ]
           [Œº‚Çô‚Çã‚ÇÅ]
           [Œº‚Çô  ],

           [Œ£‚ÇÄ + Œº‚ÇÄŒº‚ÇÄ·µÄ      Œ£‚ÇÄA‚ÇÅ·µÄ + Œº‚ÇÄŒº‚ÇÅ·µÄ                                          ]
           [A‚ÇÅŒ£‚ÇÄ + Œº‚ÇÅŒº‚ÇÄ·µÄ    Œ£‚ÇÅ + Œº‚ÇÅŒº‚ÇÅ·µÄ      Œ£‚ÇÅA‚ÇÇ·µÄ + Œº‚ÇÅŒº‚ÇÇ·µÄ                          ]
       H = [                    ·®û               ·®û              Œ£‚Çô‚Çã‚ÇÅA‚Çô·µÄ + Œº‚Çô‚Çã‚ÇÅŒº‚Çô·µÄ   ]
           [                                A‚ÇôŒ£‚Çô‚Çã‚ÇÅ + Œº‚ÇôŒº‚Çô‚Çã‚ÇÅ·µÄ   Œ£‚Çô + Œº‚ÇôŒº‚Çô·µÄ          ],

   ...where:

       * :math:`Œº·µ¢` and :math:`Œ£·µ¢` are the marginal means and covariances at each
         time step :math:`i`
       * :math:`A·µ¢` are the transition matrices of the state space model

   :param ssm: The object to transform to expectation parameters.
   :return: A tuple containing the 3 expectation parameters:

       * `eta_linear` corresponds to :math:`Œ∑` with shape ``[..., N+1, D]``
       * `eta_diag` corresponds to the block diagonal part of :math:`Œó`
         with shape ``[..., N+1, D, D]``
       * `eta_subdiag` corresponds to the lower block sub-diagonal of :math:`Œó`
         with shape ``[..., N, D, D]``

       Note each returned object in the tuple is a :data:`~markovflow.base.TensorType`.


.. py:function:: expectations_to_ssm_params(eta_linear: gpflow.base.TensorType, eta_diag: gpflow.base.TensorType, eta_subdiag: gpflow.base.TensorType) -> Tuple[gpflow.base.TensorType, gpflow.base.TensorType, gpflow.base.TensorType, gpflow.base.TensorType, gpflow.base.TensorType]

   Transform the expectation parameters to parameters of a
   :class:`~markovflow.state_space_model.StateSpaceModel`.

   The covariance of the joint distribution is given by:

   .. math:: Œ£ = Œó - Œ∑Œ∑·µÄ

   ...which results in::

           [Œ£‚ÇÄ         Œ£‚ÇÄA‚ÇÅ·µÄ       Œ£‚ÇÄA‚ÇÅ·µÄA‚ÇÇ·µÄ    ‚Ä¶                               ]
           [A‚ÇÅŒ£‚ÇÄ       Œ£‚ÇÅ          Œ£‚ÇÅA‚ÇÇ·µÄ       Œ£‚ÇÅA‚ÇÇ·µÄA‚ÇÉ·µÄ    ‚Ä¶                   ]
       Œ£ = [A‚ÇÇA‚ÇÅŒ£‚ÇÄ     A‚ÇÇŒ£‚ÇÅ        Œ£‚ÇÇ          Œ£‚ÇÇA‚ÇÉ·µÄ       ‚Ä¶                   ]
           [‚ãÆ          ‚ãÆ           ·®û           ·®û           ·®û           Œ£‚Çô‚Çã‚ÇÅA‚Çô·µÄ ]
           [                                   ‚Ä¶           A‚ÇôŒ£‚Çô‚Çã‚ÇÅ      Œ£‚Çô      ],

   ...where:

       * :math:`Œ£·µ¢` are the marginal covariances at each time step :math:`i`
       * :math:`A·µ¢` are the transition matrices of the state space model

   If we denote by :math:`Œ£·µ¢·µ¢‚Çã‚ÇÅ` the lower block sub-diagonal of the joint covariance, and by
   :math:`Œ£·µ¢·µ¢` the block diagonal of it, then we can get the state space model parameters using
   the following identities:

   .. math::
       &A·µ¢ = Œ£·µ¢·µ¢‚Çã‚ÇÅ (Œ£·µ¢·µ¢)‚Åª¬π\\
       &Q·µ¢ = Œ£·µ¢ - A·µ¢Œ£·µ¢‚Çã‚ÇÅA·µ¢·µÄ\\
       &b·µ¢ = Œ∑·µ¢ - A·µ¢Œ∑·µ¢‚Çã‚ÇÅ\\
       &P‚ÇÄ = Œ£‚ÇÄ\\
       &Œº‚ÇÄ = Œ∑‚ÇÄ

   :param eta_linear: Corresponds to :math:`Œ∑` with shape ``[..., N+1, D]``.
   :param eta_diag: Corresponds to the block diagonal part of :math:`Œó`
       with shape ``[..., N+1, D, D]``.
   :param eta_subdiag: Corresponds to the lower block sub-diagonal of :math:`Œó` with
       shape ``[..., N, D, D]``.
   :return: A tuple containing the 5 parameters of the state space model in the following order:

       * `As` corresponds to the transition matrices :math:`A·µ¢` with shape ``[..., N, D, D]``
       * `offsets` corresponds to the state offset vectors :math:`b·µ¢` with shape ``[..., N, D]``
       * `chol_initial_covariance` corresponds to the Cholesky of :math:`P‚ÇÄ`
         with shape ``[..., D, D]``
       * `chol_process_covariances` corresponds to the Cholesky of :math:`Q·µ¢`
         with shape ``[..., N, D, D]``
       * `initial_mean` corresponds to the mean of the initial distribution :math:`Œº‚ÇÄ`
         with shape ``[..., D]``

       Note each returned object in the tuple is a :data:`~markovflow.base.TensorType`.


.. py:function:: ssm_to_naturals(ssm: markovflow.state_space_model.StateSpaceModel) -> Tuple[gpflow.base.TensorType, gpflow.base.TensorType, gpflow.base.TensorType]

   Transform a :class:`~markovflow.state_space_model.StateSpaceModel` to the
   natural parameters of the equivalent Gaussian distribution.

   The natural parameters :math:`Œ∏` and :math:`Œò` are given by::

           [P‚ÇÄ‚Åª¬πŒº‚ÇÄ - A‚ÇÅ·µÄQ‚ÇÅ‚Åª¬πb‚ÇÅ     ]
           [Q‚ÇÅ‚Åª¬πb‚ÇÅ - A‚ÇÇ·µÄQ‚ÇÇ‚Åª¬πb‚ÇÇ     ]
       Œ∏ = [‚ãÆ                      ]
           [Q‚Çô‚Çã‚ÇÅ‚Åª¬πb‚Çô‚Çã‚ÇÅ - A‚Çô·µÄQ‚Çô‚Åª¬πb‚Çô ]
           [Q‚Çô‚Åª¬πb‚Çô                 ],

           [-¬Ω(P‚ÇÄ‚Åª¬π + A‚ÇÅ·µÄ Q‚ÇÅ‚Åª¬π A‚ÇÅ)     A‚ÇÅ·µÄ Q‚ÇÅ‚Åª¬π                                            ]
           [Q‚ÇÅ‚Åª¬π A‚ÇÅ                    -¬Ω(Q‚ÇÅ‚Åª¬π + A‚ÇÇ·µÄ Q‚ÇÇ‚Åª¬π A‚ÇÇ)      A‚ÇÇ·µÄ Q‚ÇÇ‚Åª¬π                ]
       Œò = [                           ·®û                           ·®û               A‚Çô·µÄQ‚Çô‚Åª¬π ]
           [                                                       Q‚Çô‚Åª¬πA‚Çô          -¬ΩQ‚Çô‚Åª¬π  ]

   ...where:

       * :math:`b·µ¢`, :math:`A·µ¢` and :math:`Q·µ¢` are the state offsets, transition
         matrices and covariances of the state space model
       * :math:`Œº‚ÇÄ` and :math:`P‚ÇÄ` are the mean and covariance of the initial state

   :param ssm: The object to transform to natural parameters.
   :return: A tuple containing the 3 natural parameters:

       * `theta_linear` corresponds to :math:`Œ∏` with shape ``[..., N+1, D]``.
       * `theta_diag` corresponds to the block diagonal part of :math:`Œò`
         with shape ``[..., N+1, D, D]``.
       * `theta_subdiag` corresponds to the lower block sub-diagonal of :math:`Œò`
         with shape ``[..., N, D, D]``

       Note each returned object in the tuple is a :data:`~markovflow.base.TensorType`.


.. py:function:: ssm_to_naturals_no_smoothing(ssm: markovflow.state_space_model.StateSpaceModel) -> Tuple[gpflow.base.TensorType, gpflow.base.TensorType, gpflow.base.TensorType]

   Transform a :class:`~markovflow.state_space_model.StateSpaceModel` to the natural
   parameters of the equivalent Gaussian distribution.

   It is similar to :func:`ssm_to_naturals` but in this case the natural
   parameters do not contain information from the future (smoothing). The updates regarding
   the smoothing have been pushed into the partition function, as described in::

       @inproceedings{pmlr-v97-lin19b,
         title =        {Fast and Simple Natural-Gradient Variational Inference with Mixture of
                         Exponential-family Approximations},
         author =       {Lin, Wu and Khan, Mohammad Emtiyaz and Schmidt, Mark},
         booktitle =    {Proceedings of the 36th International Conference on Machine Learning},
         pages =        {3992--4002},
         year =         {2019},
         url =          {http://proceedings.mlr.press/v97/lin19b.html},
       }

   The natural parameters :math:`Œ∏` and :math:`Œò` are given by::

           [P‚ÇÄ‚Åª¬πŒº‚ÇÄ     ]
           [Q‚ÇÅ‚Åª¬πb‚ÇÅ     ]
       Œ∏ = [‚ãÆ          ]
           [Q‚Çô‚Çã‚ÇÅ‚Åª¬πb‚Çô‚Çã‚ÇÅ ]
           [Q‚Çô‚Åª¬πb‚Çô     ],

           [-¬ΩP‚ÇÄ‚Åª¬π     A‚ÇÅ·µÄ Q‚ÇÅ‚Åª¬π                            ]
           [Q‚ÇÅ‚Åª¬π A‚ÇÅ    -¬ΩQ‚ÇÅ‚Åª¬π      A‚ÇÇ·µÄ Q‚ÇÇ‚Åª¬π                ]
       Œò = [           ·®û           ·®û               A‚Çô·µÄQ‚Çô‚Åª¬π ]
           [                       Q‚Çô‚Åª¬πA‚Çô          -¬ΩQ‚Çô‚Åª¬π  ]

   ...where:

       * :math:`b·µ¢`, :math:`A·µ¢` and :math:`Q·µ¢` are the state offsets, transition matrices
         and covariances of the state space model
       * :math:`Œº‚ÇÄ` and :math:`P‚ÇÄ` are the mean and covariance of the initial state

   :param ssm: The object to transform to natural parameters.
   :return: A tuple containing the 3 natural parameters:

       * `theta_linear` corresponds to :math:`Œ∏` with shape ``[..., N+1, D]``
       * `theta_diag` corresponds to the block diagonal part of :math:`Œò`
         with shape ``[..., N+1, D, D]``.
       * `theta_subdiag` corresponds to the lower block sub-diagonal of :math:`Œò`
         with shape ``[..., N, D, D]``

       Note each returned object in the tuple is a :data:`~markovflow.base.TensorType`.


.. py:function:: naturals_to_ssm_params(theta_linear: gpflow.base.TensorType, theta_diag: gpflow.base.TensorType, theta_subdiag: gpflow.base.TensorType) -> Tuple[gpflow.base.TensorType, gpflow.base.TensorType, gpflow.base.TensorType, gpflow.base.TensorType, gpflow.base.TensorType]

   Transform the natural parameters to parameters of a
   :class:`~markovflow.state_space_model.StateSpaceModel`.

   The precision of the joint distribution is given by::

           [-2Œò‚ÇÄ‚ÇÄ      -Œò‚ÇÅ‚ÇÄ·µÄ                           ]
           [-Œò‚ÇÅ‚ÇÄ       -2Œò‚ÇÅ‚ÇÅ       -Œò‚ÇÇ‚ÇÅ·µÄ               ]
       P = [           ·®û           ·®û           -Œò‚Çô‚Çô‚Çã‚ÇÅ·µÄ ]
           [                       -Œò‚Çô‚Çô‚Çã‚ÇÅ      -2Œò‚Çô‚Çô   ],

   ...where :math:`Œò·µ¢·µ¢` and :math:`Œò·µ¢·µ¢‚Çã‚ÇÅ` are the block diagonal and block sub-diagonal
   of the natural parameter :math:`Œò`::

           [-¬Ω(P‚ÇÄ‚Åª¬π + A‚ÇÅ·µÄ Q‚ÇÅ‚Åª¬π A‚ÇÅ)     A‚ÇÅ·µÄ Q‚ÇÅ‚Åª¬π                                            ]
           [Q‚ÇÅ‚Åª¬π A‚ÇÅ                    -¬Ω(Q‚ÇÅ‚Åª¬π + A‚ÇÇ·µÄ Q‚ÇÇ‚Åª¬π A‚ÇÇ)      A‚ÇÇ·µÄ Q‚ÇÇ‚Åª¬π                ]
       Œò = [                           ·®û                           ·®û               A‚Çô·µÄQ‚Çô‚Åª¬π ]
           [                                                       Q‚Çô‚Åª¬πA‚Çô          -¬ΩQ‚Çô‚Åª¬π  ],

   ...and where:

       * :math:`A·µ¢` and :math:`Q·µ¢` are the state transition matrices and covariances
         of the state space model
       * :math:`P‚ÇÄ` is the covariance of the initial state

   Inverting the precision gives as the joint covariance matrix::

           [Œ£‚ÇÄ         Œ£‚ÇÄA‚ÇÅ·µÄ       Œ£‚ÇÄA‚ÇÅ·µÄA‚ÇÇ·µÄ    ‚Ä¶                               ]
           [A‚ÇÅŒ£‚ÇÄ       Œ£‚ÇÅ          Œ£‚ÇÅA‚ÇÇ·µÄ       Œ£‚ÇÅA‚ÇÇ·µÄA‚ÇÉ·µÄ    ‚Ä¶                   ]
       Œ£ = [A‚ÇÇA‚ÇÅŒ£‚ÇÄ     A‚ÇÇŒ£‚ÇÅ        Œ£‚ÇÇ          Œ£‚ÇÇA‚ÇÉ·µÄ       ‚Ä¶                   ]
           [‚ãÆ          ‚ãÆ           ·®û           ·®û           ·®û           Œ£‚Çô‚Çã‚ÇÅA‚Çô·µÄ ]
           [                                   ‚Ä¶           A‚ÇôŒ£‚Çô‚Çã‚ÇÅ      Œ£‚Çô      ],

   ...where:

       * :math:`Œ£·µ¢` are the marginal covariances at each time step :math:`i`
       * :math:`A·µ¢` are the transition matrices of the state space model

   If we define as :math:`Œ£·µ¢·µ¢‚Çã‚ÇÅ` the lower block sub-diagonal of the joint covariance,
   and as :math:`Œ£·µ¢·µ¢` the block diagonal of it, we can get the state transition matrices from:

   .. math:: A·µ¢ = Œ£·µ¢·µ¢‚Çã‚ÇÅ (Œ£·µ¢·µ¢)‚Åª¬π

   We then follow the SpInGP paper and create the matrices::

              [ I               ]          [P‚ÇÄ             ]
              [-A‚ÇÅ     I        ]          [   Q‚ÇÅ          ]
       A‚Åª¬π =  [    ·®û       ·®û    ]      Q = [       ·®û       ]
              [        -A‚Çô     I]          [           Q‚Çô  ]

   ...so that:

   .. math:: P = A‚Åª·µÄQ‚Åª¬πA‚Åª¬π

   If we solve :math:`(A‚Åª¬π)‚Åª¬π P` we get::

                                        [P‚ÇÄ‚Åª¬π                  ]
                                        [-Q‚ÇÅ‚Åª¬πA‚ÇÅ   Q‚ÇÅ‚Åª¬π        ]
       (A‚Åª¬π)‚Åª¬π P = Q‚Åª¬πA‚Åª¬π,     Q‚Åª¬πA‚Åª¬π = [      ·®û       ·®û       ]
                                        [      -Q‚Çô‚Åª¬πA‚Çô     Q‚Çô‚Åª¬π],

   ...where the block diagonal of :math:`Q‚Åª¬πA‚Åª¬π` holds the process noise precisions :math:`Q·µ¢‚Åª¬π`
   and the precision of the initial state :math:`P‚ÇÄ‚Åª¬π`.

   To get the offsets we follow a similar strategy but solve against :math:`Œ∏`. First we write::

           [P‚ÇÄ‚Åª¬πŒº‚ÇÄ - A‚ÇÅ·µÄQ‚ÇÅ‚Åª¬πb‚ÇÅ ]   [I   -A‚ÇÅ·µÄ     ][P‚ÇÄ‚Åª¬π             ][Œº‚ÇÄ]
           [Q‚ÇÅ‚Åª¬πb‚ÇÅ - A‚ÇÇ·µÄQ‚ÇÇ‚Åª¬πb‚ÇÇ ]   [    I   -A‚ÇÇ·µÄ ][     Q‚ÇÅ‚Åª¬π        ][b‚ÇÅ]
       Œ∏ = [‚ãÆ                  ] = [        ·®û   ·®û][         ·®û       ][‚ãÆ ]
           [Q‚Çô‚Åª¬πb‚Çô             ]   [            I][             Q‚Çô‚Åª¬π][b‚Çô].

   Then we solve :math:`(A‚Åª·µÄ)‚Åª¬πŒ∏` to get::

                  [P‚ÇÄ‚Åª¬π             ][Œº‚ÇÄ]
                  [     Q‚ÇÅ‚Åª¬π        ][b‚ÇÅ]
       (A‚Åª·µÄ)‚Åª¬πŒ∏ = [         ·®û       ][‚ãÆ ]
                  [             Q‚Çô‚Åª¬π][b‚Çô].

   Finally, :math:`Q(A‚Åª·µÄ)‚Åª¬πŒ∏`::

       [Œº‚ÇÄ]
       [b‚ÇÅ]
       [‚ãÆ ] = Q(A‚Åª·µÄ)‚Åª¬πŒ∏.
       [b‚Çô]

   :param theta_linear: Corresponds to :math:`Œ∏` with shape ``[..., N+1, D]``.
   :param theta_diag: Corresponds to the block diagonal part of :math:`Œò`
       with shape ``[..., N+1, D, D]``.
   :param theta_subdiag: Corresponds to the lower block sub-diagonal
       of :math:`Œò` with shape ``[..., N, D, D]``.
   :return: A tuple containing the 5 parameters of the state space model in the following order:

       * `As` corresponds to the transition matrices :math:`A·µ¢` with shape ``[..., N, D, D]``
       * `offsets` corresponds to the state offset vectors :math:`b·µ¢` with shape ``[..., N, D]``
       * `chol_initial_covariance` corresponds to the Cholesky of :math:`P‚ÇÄ`
         with shape ``[..., D, D]``
       * `chol_process_covariances` corresponds to the Cholesky of :math:`Q·µ¢`
         with shape ``[..., N, D, D]``
       * `initial_mean` corresponds to the mean of the initial distribution :math:`Œº‚ÇÄ`
         with shape ``[..., D]``

       Note each returned object in the tuple is a :data:`~markovflow.base.TensorType`.


.. py:function:: naturals_to_ssm_params_no_smoothing(theta_linear: gpflow.base.TensorType, theta_diag: gpflow.base.TensorType, theta_subdiag: gpflow.base.TensorType) -> Tuple[gpflow.base.TensorType, gpflow.base.TensorType, gpflow.base.TensorType, gpflow.base.TensorType, gpflow.base.TensorType]

   Transform the natural parameters to parameters of a
   :class:`~markovflow.state_space_model.StateSpaceModel`.

   This is similar to :func:`naturals_to_ssm_params` but in this case the natural parameters
   do not contain information from the future (smoothing). The updates regarding the
   smoothing have been pushed into the partition function.

   We know that the natural parameters have the following form::

           [-¬ΩP‚ÇÄ‚Åª¬π     A‚ÇÅ·µÄ Q‚ÇÅ‚Åª¬π                        ]
           [Q‚ÇÅ‚Åª¬π A‚ÇÅ    -¬ΩQ‚ÇÅ‚Åª¬π      A‚ÇÇ·µÄ Q‚ÇÇ‚Åª¬π            ]
       Œò = [           ·®û           ·®û           A‚Çô·µÄQ‚Çô‚Åª¬π ]
           [                       Q‚Çô‚Åª¬πA‚Çô      -¬ΩQ‚Çô‚Åª¬π  ],

           [P‚ÇÄ‚Åª¬πŒº‚ÇÄ]   [P‚ÇÄ‚Åª¬π            ][Œº‚ÇÄ]
           [Q‚ÇÅ‚Åª¬πb‚ÇÅ]   [     Q‚ÇÅ‚Åª¬π       ][b‚ÇÅ]
       Œ∏ = [‚ãÆ     ] = [         ·®û      ][‚ãÆ ]
           [Q‚Çô‚Åª¬πb‚Çô]   [            Q‚Çô‚Åª¬π][b‚Çô],

   ...where:

       * :math:`b·µ¢`, :math:`A·µ¢` and :math:`Q·µ¢` are the state offsets, transition matrices
         and covariances of the state space model
       * :math:`Œº‚ÇÄ` and :math:`P‚ÇÄ` are the mean and covariance of the initial state

   So by inverting the block diagonal of :math:`Œò` we get the process noise covariance matrices.
   Solving the block diagonal against the sub diagonal yields the state transition matrices.
   Solving the block diagonal of :math:`Œò` against :math:`Œ∏` yields the state offsets and
   the initial mean.

   :param theta_linear: Corresponds to :math:`Œ∏` with shape ``[..., N+1, D]``.
   :param theta_diag: Corresponds to the block diagonal part of :math:`Œò`
       with shape ``[..., N+1, D, D]``.
   :param theta_subdiag: Corresponds to the lower block sub-diagonal of :math:`Œò`
       with shape ``[..., N, D, D]``.
   :return: A tuple containing the 5 parameters of the state space model in the following order:

       * `As` corresponds to the transition matrices :math:`A·µ¢` with shape ``[..., N, D, D]``
       * `offsets` corresponds to the state offset vectors :math:`b·µ¢` with shape ``[..., N, D]``
       * `chol_initial_covariance` corresponds to the Cholesky of :math:`P‚ÇÄ`
         with shape ``[..., D, D]``
       * `chol_process_covariances` corresponds to the Cholesky of :math:`Q·µ¢`
         with shape ``[..., N, D, D]``
       * `initial_mean` corresponds to the mean of the initial distribution :math:`Œº‚ÇÄ`
         with shape ``[..., D]``

       Note each returned object in the tuple is a :data:`~markovflow.base.TensorType`.


