:orphan:

:py:mod:`markovflow.sde.sde`
============================

.. py:module:: markovflow.sde.sde


Module Contents
---------------

.. py:class:: SDE(state_dim=1)

   Bases: :py:obj:`abc.ABC`

   Abstract class representing Stochastic Differential Equation.

   ..math::
    &dx(t)/dt = f(x(t),t) + l(x(t),t) w(t)


   :param state_dim: The output dimension of the kernel.

   .. py:method:: state_dim() -> int
      :property:

      Return the state dimension of the sde.


   .. py:method:: drift(x: tensorflow.Tensor, t: tensorflow.Tensor) -> tensorflow.Tensor
      :abstractmethod:

      Drift function of the SDE i.e. `f(x(t),t)`

      :param x: state at `t` i.e. `x(t)` with shape ``(n_batch, state_dim)``.
      :param t: time `t` with shape ``(n_batch, state_dim)``.

      :return: Drift value i.e. `f(x(t), t)` with shape ``(n_batch, state_dim)``.

      :raises NotImplementedError: Must be implemented in derived classes.


   .. py:method:: diffusion(x: tensorflow.Tensor, t: tensorflow.Tensor) -> tensorflow.Tensor
      :abstractmethod:

      Diffusion function of the SDE i.e. `l(x(t),t)`

      :param x: state at `t` i.e. `x(t)` with shape ``(n_batch, state_dim)``.
      :param t: time `t` with shape ``(n_batch, 1)``.

      :return: Diffusion value i.e. `l(x(t), t)` with shape ``(n_batch, state_dim, state_dim)``.

      :raises NotImplementedError: Must be implemented in derived classes.


   .. py:method:: gradient_drift(x: tensorflow.Tensor, t: tensorflow.Tensor = tf.zeros((1, 1))) -> tensorflow.Tensor

      Calculates the gradient of the drift wrt the states x(t).

      ..math:: df(x(t))/dx(t)

      :param x: states with shape (num_states, state_dim).
      :param t: time of states with shape (num_states, 1), defaults to zero.

      :return: the gradient of the SDE drift with shape (num_states, state_dim).


   .. py:method:: expected_drift(q_mean: tensorflow.Tensor, q_covar: tensorflow.Tensor) -> tensorflow.Tensor

      Calculates the Expectation of the drift under the provided Gaussian over states.

      ..math:: E_q(x(t))[f(x(t))]

      :param q_mean: mean of Gaussian over states with shape (n_batch, num_states, state_dim).
      :param q_covar: covariance of Gaussian over states with shape (n_batch, num_states, state_dim, state_dim).

      :return: the expectation value with shape (n_batch, num_states, state_dim).


   .. py:method:: expected_gradient_drift(q_mean: tensorflow.Tensor, q_covar: tensorflow.Tensor) -> tensorflow.Tensor

       Calculates the Expectation of the gradient of the drift under the provided Gaussian over states

      ..math:: E_q(.)[f'(x(t))]

      :param q_mean: mean of Gaussian over states with shape (n_batch, num_states, state_dim).
      :param q_covar: covariance of Gaussian over states with shape (n_batch, num_states, state_dim, state_dim).

      :return: the expectation value with shape (n_batch, num_states, state_dim).



.. py:class:: OrnsteinUhlenbeckSDE(decay: tensorflow.Tensor, q: tensorflow.Tensor = tf.ones((1, 1)))

   Bases: :py:obj:`SDE`

   Ornstein-Uhlenbeck SDE represented by

   ..math:: dx(t) = -λ x(t) dt + dB(t), the spectral density of the Brownian motion is specified by q.

   Initialize the Ornstein-Uhlenbeck SDE.

   :param decay: λ, a tensor with shape ``(1, 1)``.
   :param q: spectral density of the Brownian motion ``(state_dim, state_dim)``.

   .. py:method:: drift(x: tensorflow.Tensor, t: tensorflow.Tensor) -> tensorflow.Tensor

      Drift of the Ornstein-Uhlenbeck process
      ..math:: f(x(t), t) = -λ x(t)

      :param x: state at `t` i.e. `x(t)` with shape ``(n_batch, state_dim)``.
      :param t: time `t` with shape ``(n_batch, 1)``.

      :return: Drift value i.e. `f(x(t), t)` with shape ``(n_batch, state_dim)``.


   .. py:method:: diffusion(x: tensorflow.Tensor, t: tensorflow.Tensor) -> tensorflow.Tensor

      Diffusion of the Ornstein-Uhlenbeck process
      ..math:: l(x(t), t) = sqrt(q)

      :param x: state at `t` i.e. `x(t)` with shape ``(n_batch, state_dim)``.
      :param t: time `t` with shape ``(n_batch, 1)``.

      :return: Diffusion value i.e. `l(x(t), t)` with shape ``(n_batch, state_dim, state_dim)``.



.. py:class:: DoubleWellSDE(q: tensorflow.Tensor = tf.ones((1, 1)))

   Bases: :py:obj:`SDE`

   Double-Well SDE represented by

   ..math:: dx(t) = f(x(t)) dt + dB(t),

   where f(x(t)) = 4 x(t) (1 - x(t)^2) and the spectral density of the Brownian motion is specified by q.

   Initialize the Double-Well SDE.

   :param q: spectral density of the Brownian motion ``(state_dim, state_dim)``.

   .. py:method:: drift(x: tensorflow.Tensor, t: tensorflow.Tensor) -> tensorflow.Tensor

      Drift of the double-well process
      ..math:: f(x(t), t) = 4 x(t) (1 - x(t)^2)

      :param x: state at `t` i.e. `x(t)` with shape ``(n_batch, state_dim)``.
      :param t: time `t` with shape ``(n_batch, 1)``.

      :return: Drift value i.e. `f(x(t), t)` with shape ``(n_batch, state_dim)``.


   .. py:method:: diffusion(x: tensorflow.Tensor, t: tensorflow.Tensor) -> tensorflow.Tensor

      Diffusion of the double-well process
      ..math:: l(x(t), t) = sqrt(q)

      :param x: state at `t` i.e. `x(t)` with shape ``(n_batch, state_dim)``.
      :param t: time `t` with shape ``(n_batch, 1)``.

      :return: Diffusion value i.e. `l(x(t), t)` with shape ``(n_batch, state_dim, state_dim)``.



